# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XpyyMBK4u1jn2t4M5Oyodz3_bGFASa_v
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json
import statsmodels.formula.api as sm
from statsmodels.stats.anova import anova_lm
from statsmodels.tsa.seasonal import seasonal_decompose

df_day = pd.read_csv('day.csv')
df_hour = pd.read_csv('hour.csv')

st.title("Bike Sharing Dashboard")

st.sidebar.header("Select Analysis")
analysis_option = st.sidebar.selectbox("Choose an analysis",
                                      ["Hourly Rental Analysis", "Correlation Analysis (Day)",
                                       "Correlation Analysis (Hour)", "Weekday Comparison", "Season Analysis", "Rental Trend Analysis", "Decomposition Analysis"])


if analysis_option == "Hourly Rental Analysis":
    st.header("Hourly Rental Analysis")

    # Menghitung jumlah penyewa berdasarkan jam
    hourly_rentals = df_hour.groupby('hr')['cnt'].sum().reset_index()

    # Membuat plot untuk hubungan antara jam dan jumlah penyewa
    plt.figure(figsize=(12, 6))
    sns.barplot(x='hr', y='cnt', data=hourly_rentals, palette='viridis')
    plt.title('Jumlah Penyewa Berdasarkan Jam')
    plt.xlabel('Jam')
    plt.ylabel('Jumlah Penyewa')
    plt.xticks(range(0, 24))  # Menampilkan semua jam
    plt.grid(axis='y')
    st.pyplot(plt)

    # Tampilkan korelasi dan statistik deskriptif
    correlation = hourly_rentals['hr'].corr(hourly_rentals['cnt'])
    statistics = hourly_rentals['cnt'].describe()
    st.write("Correlation between hour and rental count:", correlation)
    st.write("Descriptive statistics for rental count:", statistics)


elif analysis_option == "Correlation Analysis (Day)":
    st.header("Correlation Analysis (Day)")

    numerical_features = df_day.select_dtypes(include=['number']).columns
    numerical_features = numerical_features.drop(['instant'])
    corr_matrix = df_day[numerical_features].corr()

    plt.figure(figsize=(12, 8))
    sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm', linewidths=0.5)
    plt.title('Korelasi Antar Kolom Dataset day')
    st.pyplot(plt)

elif analysis_option == "Correlation Analysis (Hour)":
    st.header("Correlation Analysis (Hour)")

    numerical_features = df_hour.select_dtypes(include=['number']).columns
    numerical_features = numerical_features.drop(['instant'])
    corr_matrix = df_hour[numerical_features].corr()

    plt.figure(figsize=(12, 8))
    sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm', linewidths=0.5)
    plt.title('Korelasi Antar Kolom Dataset Hour')
    st.pyplot(plt)


elif analysis_option == "Weekday Comparison":
    st.header("Weekday Comparison")

    weekday_comparison = df_day.groupby(['weekday', 'workingday', 'holiday'])['cnt'].mean().reset_index()

    plt.figure(figsize=(12, 6))
    sns.barplot(data=weekday_comparison, x='weekday', y='cnt', hue='workingday')
    plt.title("Perbandingan Weekdays, Working Days, and Holidays")
    plt.xlabel("Hari (0 = Hari Minggu)")
    plt.ylabel("Rata-rata")
    plt.legend(title="(1 = Hari Kerja)")
    st.pyplot(plt)

    # Tampilkan ANOVA table
    model = sm.ols('cnt ~ C(workingday)', data=df_day).fit()
    anova_table = anova_lm(model, typ=2)
    st.write("ANOVA table for workingday effect:", anova_table)

    model = sm.ols('cnt ~ C(weekday)', data=df_day).fit()
    anova_table = anova_lm(model, typ=2)
    st.write("ANOVA table for weekday effect:", anova_table)

elif analysis_option == "Season Analysis":
    st.header("Season Analysis")

    season_comparison = df_day.groupby('season')['cnt'].mean().reset_index()

    plt.figure(figsize=(10, 6))
    sns.barplot(data=season_comparison, x='season', y='cnt', palette='viridis')
    plt.title('Rata-rata Jumlah Penyewa Berdasarkan Musim')
    plt.xlabel('Musim (1: Musim Semi, 2: Musim Panas, 3: Musim Gugur, 4: Musim Dingin)')
    plt.ylabel('Rata-rata Jumlah Penyewa')
    st.pyplot(plt)

elif analysis_option == "Rental Trend Analysis":
    st.header("Rental Trend Analysis")

    daily_rentals = df_day.groupby('dteday')['cnt'].sum()

    plt.figure(figsize=(12, 6))
    plt.plot(daily_rentals.index, daily_rentals.values)
    plt.title('Tren Penyewaan Sepeda Harian')
    plt.xlabel('Tanggal')
    plt.ylabel('Jumlah Penyewaan')
    plt.grid(True)
    plt.xticks(rotation=45)
    st.pyplot(plt)

    rolling_average = daily_rentals.rolling(window=30).mean()

    plt.figure(figsize=(12, 6))
    plt.plot(daily_rentals.index, daily_rentals.values, label='Jumlah Penyewaan Harian')
    plt.plot(rolling_average.index, rolling_average.values, label='Rata-rata Bergerak 30 Hari', color='red')
    plt.title('Tren Penyewaan Sepeda Harian dengan Rata-rata Bergerak')
    plt.xlabel('Tanggal')
    plt.ylabel('Jumlah Penyewaan')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.legend()
    st.pyplot(plt)

elif analysis_option == "Decomposition Analysis":
    st.header("Decomposition Analysis")

    df_day['dteday'] = pd.to_datetime(df_day['dteday'])
    df_day.set_index('dteday', inplace=True)
    decomposition = seasonal_decompose(df_day['cnt'], model='additive', period=30)
    fig = decomposition.plot()
    fig.set_size_inches(14, 8)
    plt.suptitle('Dekomposisi Deret Waktu Penyewaan Sepeda Harian', fontsize=16)
    st.pyplot(plt)